generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum GameMode {
  CLASSIC
  BOOST
  GIFT
}

enum Achievement {
  TEN_WIN
  TWENTYFIVE_WIN
  ONE_HUNDRED_WIN
  FIRST_WIN
  FIVE_LOSE_IN_A_ROW
  MULTI_MODE
  FIVE_PLAYERS
  FIVE_WIN_IN_A_ROW
}

enum ChannelRole {
  MEMBER
  ADMIN
}

enum ChannelRestriction {
  BAN
  MUTE
}

enum ImageFileType {
  PNG
  JPG
}

model User {
  id          Int     @id
  name        String  @unique
  rank        Int     @default(0)
  twoFASecret String?

  avatar Avatar?

  achievements UserAchievement[]

  friendRequestsSent     FriendRequest[] @relation("Sender")
  friendRequestsReceived FriendRequest[] @relation("Receiver")

  usersBlocked   UserBlock[] @relation("Blocker")
  blockedByUsers UserBlock[] @relation("Blockee")

  messageSent     DirectMessage[] @relation("MessageSent")
  messageReceived DirectMessage[] @relation("MessageReceived")

  gamesAsPlayer1 Game[] @relation("GamePlayer1")
  gamesAsPlayer2 Game[] @relation("GamePlayer2")

  channels             ChannelMember[]
  ownedChannels        Channel[]
  channelMessages      ChannelMessage[]
  channelMessageReads  ChannelMessageRead[]
  channelsRestrictions ChannelRestrictedUser[]
}

model Avatar {
  fileType ImageFileType
  image    Bytes

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([userId])
}

model FriendRequest {
  sender   User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId Int

  receiver   User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int

  @@id([senderId, receiverId])
}

model UserBlock {
  blocker   User @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId Int

  blockee   User @relation("Blockee", fields: [blockeeId], references: [id], onDelete: Cascade)
  blockeeId Int

  @@id([blockerId, blockeeId])
}

model UserAchievement {
  achievement Achievement

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([userId, achievement])
}

model DirectMessage {
  author   User @relation("MessageSent", fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  recipient   User @relation("MessageReceived", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId Int

  content String

  sentAt DateTime  @default(now())
  readAt DateTime?

  id Int @id @default(autoincrement())
}

model Game {
  mode GameMode

  startedAt  DateTime  @default(now())
  finishedAt DateTime?

  player1   User @relation("GamePlayer1", fields: [player1Id], references: [id], onDelete: Cascade)
  player1Id Int
  player2   User @relation("GamePlayer2", fields: [player2Id], references: [id], onDelete: Cascade)
  player2Id Int

  player1Score Int @default(0)
  player2Score Int @default(0)

  id Int @id @default(autoincrement())
}

model ChannelMember {
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  role ChannelRole @default(MEMBER)

  joinedAt DateTime @default(now())

  @@id([channelId, userId])
}

model ChannelRestrictedUser {
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  restriction ChannelRestriction

  startAt DateTime  @default(now())
  endAt   DateTime?

  @@id([channelId, userId, restriction])
}

model ChannelMessageRead {
  message   ChannelMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([messageId, userId])
}

model ChannelMessage {
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  readBy ChannelMessageRead[]

  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int

  content String
  sentAt  DateTime @default(now())

  id Int @id @default(autoincrement())
}

model Channel {
  name String

  inviteOnly Boolean @default(false)
  password   String?

  owner   User @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  ownerId Int

  members           ChannelMember[]
  restrictedMembers ChannelRestrictedUser[]

  channelMessages ChannelMessage[]

  id Int @id @default(autoincrement())
}
